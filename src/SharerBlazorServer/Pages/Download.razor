@page "/download"
@using System.IO
@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using Microsoft.Extensions.Configuration

@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration


<h1>Download</h1>

<button class="btn btn-primary" @onclick="RefleshAsync">Reflesh</button>
    
<div class="p-2">
    <ul style="word-wrap: break-word">
        @{
            int i = 0;
            foreach (var item in files)
            {
                <a href="api/filedownload/downloadfile?filename=@item" download>
                    <li @onclick=@(() => OnItemClicked(item))>@item</li>
                </a>
                i++;
            }
        }
    </ul>
</div>

@code {
    private List<string> files = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        this.httpClient.BaseAddress = new Uri(this.Configuration["BackendBaseUrl"]);
        await RefleshAsync().ConfigureAwait(false);
    }

    private async Task RefleshAsync()
    {
        HttpResponseMessage httpResponse = await this.httpClient.GetAsync("api/filedownload/getfilelist");
        if (!httpResponse.IsSuccessStatusCode)
        {
            throw new Exception(
$@"File list fetching error: {(int)httpResponse.StatusCode} {httpResponse.StatusCode}
Try except local address from the use of the proxy server.");
        }
        var responseString = await httpResponse.Content.ReadAsStringAsync();
        this.files = JsonSerializer.Deserialize<List<string>>(responseString);
    }

    private void OnItemClicked(string filename)
    {
        @* httpClient.GetAsync("") *@
    }
}
