@page "/upload"
@using System.IO
@using System.Text
@using System.Net.Http.Headers
@using System.Text.Json
@using Tewr.Blazor.FileReader
@using Microsoft.Extensions.Configuration
@using Models

@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IFileReaderService fileReaderService
@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration

@* https://docs.microsoft.com/en-us/aspnet/core/blazor/advanced-scenarios?view=aspnetcore-3.1#perform-large-data-transfers-in-blazor-server-apps *@


<h1>Upload</h1>

<div class="mb-5">
    <input @bind="additionalText" type="text" class="form-control mb-1" name="addition_text" style="height:50px" placeholder="Please type in ..." autofocus/>
    <input @onchange="FileInputChanged" @ref="fileInput" type="file" class="btn-lg form-control btn btn-outline-primary mb-1" style="height:80px" name="input_file" multiple/>
    <button type="submit" class="btn-lg form-control btn btn-outline-secondary" style="height:50px" @onclick="OnButtonSubmit_Click">Submit</button>
</div>

<ul style="word-wrap: break-word">
    @foreach (var item in listItems)
    {
        @* <SurveyPrompt Title="@item"></SurveyPrompt> *@
        <li>@item</li>
    }
</ul>

@code {
    private ElementReference fileInput;
    private string additionalText;
    private List<string> listItems = new List<string>();
    private static int bufferSize = 1024 * 1024 * 4;
    private byte[] buffer = new byte[bufferSize];

    protected override async Task OnInitializedAsync()
    {
        @* this.httpClient.BaseAddress = new Uri(this.NavigationManager.BaseUri); *@
        this.httpClient.BaseAddress = new Uri(this.Configuration["BackendBaseUrl"]);
    }

    public async Task OnButtonSubmit_Click()
    {
        UploadTextAsync();
        UploadFilesAsync();
    }

    private async Task UploadTextAsync()
    {
        HttpRequestMessage request = new(HttpMethod.Post, "api/fileupload/text")
        {
            Content = new StringContent(JsonSerializer.Serialize(new TextModel { Text = additionalText }), Encoding.UTF8, "application/json")
        };
        var httpResponse = await this.httpClient.SendAsync(request);
    }

    private async Task UploadFilesAsync()
    {
        foreach (var file in await fileReaderService.CreateReference(fileInput).EnumerateFilesAsync())
        {
            UploadSingleFileByChunkAsync(file);
        }
    }

    private async Task UploadSingleFileByChunkAsync(IFileReference file)
    {
        if (file != null)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            // Read into buffer and act (uses less memory)

            await using (Stream stream = await file.OpenReadAsync()) {
                int fileSize = (int)fileInfo.Size;
                int start = 0;
                int end = 0;
                do
                {
                    end = start + bufferSize;
                    if (end > fileSize)
                    {
                        end = fileSize;
                    }

                    byte[] buffer = await SliceFileAsync(stream, start, end, this.buffer);
                    await SendFileAsync(buffer, start, end, fileInfo.Name, fileSize);
                    
                    start += bufferSize;

                } while (end < fileSize);
            }
        }
    }

    private async Task<byte[]> SliceFileAsync(Stream stream, int start, int end, byte[] buffer)
    {
        stream.Position = start;
        // Do (async) stuff with stream...
        await stream.ReadAsync(buffer, 0, end - start);

        // return newBuffer;
        return buffer;
    }

    private async Task SendFileAsync(byte[] piece, int start, int end, string filename, int fileSize)
    {
        FileSliceModel fileSlice = new()
        {
            Piece = piece,
            Start = start,
            End = end,
            Filename = filename,
            FileSize = fileSize,
            FileMd5 = "",
        };
        HttpRequestMessage request = new(HttpMethod.Post, "api/fileupload/filepiece")
        {
            Content = new StringContent(JsonSerializer.Serialize(fileSlice), Encoding.UTF8, "application/json")
        };
        var httpResponse = await this.httpClient.SendAsync(request);
        string response = await httpResponse.Content.ReadAsStringAsync();
        this.listItems.Insert(0, response);
        this.StateHasChanged();
    }

    private void FileInputChanged(ChangeEventArgs e)
    {
        
    }
}
